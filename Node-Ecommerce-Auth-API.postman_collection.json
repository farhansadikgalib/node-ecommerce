{
  "info": {
    "name": "Node E-commerce Authentication API",
    "description": "Complete authentication API collection including registration, login, OTP verification, password reset, and Google OAuth",
    "version": "1.0.0",
    "_postman_id": "e-commerce-auth-api",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('userId', responseJson.userId);",
                  "    pm.test('User registered successfully', () => {",
                  "        pm.expect(responseJson.message).to.include('registered successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user with email, password, firstName, and lastName. Sends OTP to email for verification."
          }
        },
        {
          "name": "Verify OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('OTP verified successfully', () => {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.message).to.include('verified successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"otp\": \"{{otpCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-otp"]
            },
            "description": "Verify the OTP sent to user's email during registration."
          }
        },
        {
          "name": "Resend OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/resend-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "resend-otp"]
            },
            "description": "Resend OTP to user's email if not received or expired."
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.environment.set('authToken', responseJson.token);",
                  "    pm.environment.set('userId', responseJson.user.id);",
                  "    pm.test('Login successful', () => {",
                  "        pm.expect(responseJson.message).to.eql('Login successful');",
                  "        pm.expect(responseJson.token).to.not.be.undefined;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with email and password. Returns JWT token for authenticated requests."
          }
        }
      ],
      "description": "Basic authentication endpoints for user registration and login"
    },
    {
      "name": "Password Reset",
      "item": [
        {
          "name": "Forgot Password - Send OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Password reset OTP sent', () => {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.message).to.include('OTP sent');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "forgot-password"]
            },
            "description": "Send password reset OTP to user's email. User must be verified to reset password."
          }
        },
        {
          "name": "Verify Forgot Password OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Password reset OTP verified', () => {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.message).to.include('OTP verified');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"otp\": \"{{resetOtpCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-forgot-password-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-forgot-password-otp"]
            },
            "description": "Verify the password reset OTP before allowing password change."
          }
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test('Password reset successfully', () => {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.message).to.include('reset successfully');",
                  "    });",
                  "    pm.environment.set('userPassword', pm.environment.get('newPassword'));",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"otp\": \"{{resetOtpCode}}\",\n  \"newPassword\": \"{{newPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "reset-password"]
            },
            "description": "Reset user password using verified OTP and new password."
          }
        }
      ],
      "description": "Password reset flow with OTP verification"
    },
    {
      "name": "Google OAuth",
      "item": [
        {
          "name": "Google Login - Initiate",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/google",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "google"]
            },
            "description": "Initiate Google OAuth login. This will redirect to Google's authentication page. Use in browser."
          }
        },
        {
          "name": "Google OAuth Success",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/google/success",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "google", "success"]
            },
            "description": "Google OAuth success callback. Called after successful Google authentication."
          }
        },
        {
          "name": "Google OAuth Failure",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/google/failure",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "google", "failure"]
            },
            "description": "Google OAuth failure callback. Called when Google authentication fails."
          }
        }
      ],
      "description": "Google OAuth authentication endpoints"
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Server Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Server is running', () => {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.include('running');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Check if the server is running and responding."
          }
        }
      ],
      "description": "Health check endpoints"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default values if not already set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:5000');",
          "}",
          "if (!pm.environment.get('userEmail')) {",
          "    pm.environment.set('userEmail', 'test@example.com');",
          "}",
          "if (!pm.environment.get('userPassword')) {",
          "    pm.environment.set('userPassword', 'password123');",
          "}",
          "if (!pm.environment.get('newPassword')) {",
          "    pm.environment.set('newPassword', 'newPassword123');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "userPassword",
      "value": "password123",
      "type": "string"
    },
    {
      "key": "newPassword",
      "value": "newPassword123",
      "type": "string"
    },
    {
      "key": "otpCode",
      "value": "123456",
      "type": "string"
    },
    {
      "key": "resetOtpCode",
      "value": "654321",
      "type": "string"
    }
  ]
}
